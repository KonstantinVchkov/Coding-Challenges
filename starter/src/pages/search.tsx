import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import BlogItem, { IBlogItem } from "../components/BlogItem";
import PageTitle from "../components/PageTitle";
import ProductItem, { IItem } from "../components/ProductItem";
import { useRouter } from "next/router";
import { API_KEY } from ".";
export interface ISearchPage {
  blogSearch:IBlogItem;
  properProduct:IItem
}
const Search: NextPage<ISearchPage> = ({blogSearch,properProduct}) => {


  return (
    <>
      <Head>
        <title>Store - Search</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <PageTitle title={'Search'} />

      <div className="bg0 m-t-23 p-b-140 mt-5">
        <div className="container">
          {/* blogs  */}
          <>
            <h2 className="mb-5">Blogs</h2>
            <div className="row isotope-grid">
              {/* blog skeleton - search result */}
              <div className="col-4">
                <BlogItem {...blogSearch}  />
              </div>
              {/* !! */}
            </div>
          </>

          {/* products */}
          <>
            <h2 className="mb-5">Products</h2>
            <div className="row isotope-grid col-4">
              {/* product skeleton */}
              <ProductItem {...properProduct}  />
              {/* !! */}
            </div>
          </>
        </div>
      </div>
    </>
  );
};

export default Search;

export const getServerSideProps:GetServerSideProps = async ({query}) => {
  const properQuery = query.q || "";
  
  try {
    const resBlogs = await fetch(API_KEY + `/blogs?q=${properQuery}`);
    const blogs = await resBlogs.json();
    const blogSearch = blogs[0] || null; 
    
    const resProducts = await fetch(API_KEY + `/products?q=${properQuery}`);
    const products = await resProducts.json();
    const properProduct = products[0] || null;     
    return {
      props: {
        blogSearch,
        properProduct,
      },
    };
  } catch (error) {
    console.error("Error fetching data in getServerSideProps", error);
    return {
      props: {
        blogSearch: null,
        properProduct: null,
      },
    };
  }
}